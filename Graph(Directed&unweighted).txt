

import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;

class Main {
    public static void main(String[] args) {
        Graph graph = new Graph(5, false);
        graph.addEdge(0, 1);
        graph.addEdge(0, 4);
        graph.addEdge(1, 2);
        graph.addEdge(1, 4);
        graph.addEdge(1, 3);
        graph.addEdge(3, 4);
        graph.addEdge(2, 3);
        graph.printGraph();
        graph.dfs(0, new boolean[5]);
        System.out.println();
        graph.bfs();
    }
}

class Graph {
    ArrayList<HashSet<Integer>> graph;
    int vertices;
    boolean isDirected;

    Graph(int vertices, boolean isDirected) {
        this.vertices = vertices;
        this.isDirected = isDirected;
        this.graph = new ArrayList<HashSet<Integer>>();
        for (int i = 0; i < vertices; i++) {
            graph.add(new HashSet<>());
        }
    }

    private boolean isValid(int src, int dest) {
        return (src >= 0 && src < vertices && dest >= 0 && dest < vertices);
    }

    public void addEdge(int src, int dest) {
        if (isValid(src, dest)) {
            this.graph.get(src).add(dest);
            if (!this.isDirected)
                this.graph.get(dest).add(src);
        } else {
            System.out.println("Invalid source and destination\nAvailable vertices are:");
            for (int i = 0; i < vertices; i++) {
                System.out.print(i + " ");
            }
        }
    }

    public void removeEdge(int src, int dest) {
        if (isValid(src, dest)) {
            this.graph.get(src).remove(dest);
            if (!this.isDirected)
                this.graph.get(dest).remove(src);
        } else {
            System.out.println("Invalid source and destination\nAvailable vertices are:");
            for (int i = 0; i < vertices; i++) {
                System.out.print(i + " ");
            }
        }
    }
    public void printGraph() {
        for (int i = 0; i < vertices; i++) {
            System.out.print(i + " -> ");
            for (int adj : graph.get(i)) {
                System.out.print(adj + " ");
            }
            System.out.println();
        }
    }
    public void dfs(int vertex, boolean[] visited) {
        visited[vertex] = true;
        System.out.print(vertex + " ");
        for (int adj : graph.get(vertex)) {
            if (!visited[adj]) {
                dfs(adj, visited);
            }
        }
    }
    public void bfs() {
        boolean[] visited = new boolean[vertices];
        Queue<Integer> queue = new LinkedList<>();

        for (int i = 0; i < vertices; i++) {
            if (!visited[i]) {
                queue.add(i);
                visited[i] = true;

                while (!queue.isEmpty()) {
                    int curr = queue.poll();
                    System.out.print(curr + " ");
                    for (int adj : graph.get(curr)) {
                        if (!visited[adj]) {
                            queue.add(adj);
                            visited[adj] = true;
                        }
                    }
                }
            }
        }
    }
}